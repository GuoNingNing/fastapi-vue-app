// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type Options } from '@hey-api/client-axios';
import type { IndexData, DbTestData, RedisTestData, ShowData, ShowError, TokenData, TokenError, TokenResponse, CellphoneTokenData, CellphoneTokenError, CellphoneTokenResponse, SendVerificationCodeData, SendVerificationCodeError, MeData, MeResponse, AddUserData, AddUserError, NewSessionData, NewSessionResponse, DelSessionData, DelSessionError, GetSessionData, GetSessionError, GetSessionResponse, ListSessionData, ListSessionResponse, AskData, AskError, SetSysPromptData, SetSysPromptError, GetSysPromptData, SetCookiesData, SetCookiesError, GetEventsData, CreateItemData, CreateItemError, CreateItemResponse, GetItemsData, GetItemsResponse, CreateUserData, CreateUserError, CreateUserResponse } from './types.gen';

export const client = createClient(createConfig());

export class DemoService {
    /**
     * Index
     */
    public static index<ThrowOnError extends boolean = false>(options?: Options<IndexData, ThrowOnError>) {
        return (options?.client ?? client).get<unknown, unknown, ThrowOnError>({
            ...options,
            url: '/api/demo/'
        });
    }
    
    /**
     * Db Test
     */
    public static dbTest<ThrowOnError extends boolean = false>(options?: Options<DbTestData, ThrowOnError>) {
        return (options?.client ?? client).get<unknown, unknown, ThrowOnError>({
            ...options,
            url: '/api/demo/db_test'
        });
    }
    
    /**
     * Redis Test
     */
    public static redisTest<ThrowOnError extends boolean = false>(options?: Options<RedisTestData, ThrowOnError>) {
        return (options?.client ?? client).get<unknown, unknown, ThrowOnError>({
            ...options,
            url: '/api/demo/redis_test'
        });
    }
    
    /**
     * Show
     */
    public static show<ThrowOnError extends boolean = false>(options: Options<ShowData, ThrowOnError>) {
        return (options?.client ?? client).get<unknown, ShowError, ThrowOnError>({
            ...options,
            url: '/api/demo/{demo_id}'
        });
    }
    
}

export class AuthService {
    /**
     * Token
     * 用户名+密码登录
     */
    public static token<ThrowOnError extends boolean = false>(options: Options<TokenData, ThrowOnError>) {
        return (options?.client ?? client).post<TokenResponse, TokenError, ThrowOnError>({
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            },
            url: '/api/auth/token'
        });
    }
    
    /**
     * Cellphone Token
     * 手机号+验证码登录
     */
    public static cellphoneToken<ThrowOnError extends boolean = false>(options: Options<CellphoneTokenData, ThrowOnError>) {
        return (options?.client ?? client).post<CellphoneTokenResponse, CellphoneTokenError, ThrowOnError>({
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            },
            url: '/api/auth/cellphone/token'
        });
    }
    
    /**
     * Send Verification Code
     * 发送验证码
     */
    public static sendVerificationCode<ThrowOnError extends boolean = false>(options: Options<SendVerificationCodeData, ThrowOnError>) {
        return (options?.client ?? client).post<unknown, SendVerificationCodeError, ThrowOnError>({
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            },
            url: '/api/auth/cellphone/verification_code'
        });
    }
    
}

export class UsersService {
    /**
     * Me
     * 当前登录用户信息
     */
    public static me<ThrowOnError extends boolean = false>(options?: Options<MeData, ThrowOnError>) {
        return (options?.client ?? client).get<MeResponse, unknown, ThrowOnError>({
            ...options,
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/users/me'
        });
    }
    
    /**
     * Add User
     */
    public static addUser<ThrowOnError extends boolean = false>(options: Options<AddUserData, ThrowOnError>) {
        return (options?.client ?? client).post<unknown, AddUserError, ThrowOnError>({
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/users/add_user'
        });
    }
    
    /**
     * Create User
     */
    public static createUser<ThrowOnError extends boolean = false>(options: Options<CreateUserData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateUserResponse, CreateUserError, ThrowOnError>({
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            },
            url: '/users/'
        });
    }
    
}

export class ChatsService {
    /**
     * New Session
     */
    public static newSession<ThrowOnError extends boolean = false>(options?: Options<NewSessionData, ThrowOnError>) {
        return (options?.client ?? client).get<NewSessionResponse, unknown, ThrowOnError>({
            ...options,
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/chats/new'
        });
    }
    
    /**
     * Del Session
     */
    public static delSession<ThrowOnError extends boolean = false>(options: Options<DelSessionData, ThrowOnError>) {
        return (options?.client ?? client).get<unknown, DelSessionError, ThrowOnError>({
            ...options,
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/chats/del'
        });
    }
    
    /**
     * Get Session
     */
    public static getSession<ThrowOnError extends boolean = false>(options: Options<GetSessionData, ThrowOnError>) {
        return (options?.client ?? client).get<GetSessionResponse, GetSessionError, ThrowOnError>({
            ...options,
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/chats/get'
        });
    }
    
    /**
     * List Session
     */
    public static listSession<ThrowOnError extends boolean = false>(options?: Options<ListSessionData, ThrowOnError>) {
        return (options?.client ?? client).get<ListSessionResponse, unknown, ThrowOnError>({
            ...options,
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/chats/list'
        });
    }
    
    /**
     * Ask
     */
    public static ask<ThrowOnError extends boolean = false>(options: Options<AskData, ThrowOnError>) {
        return (options?.client ?? client).post<unknown, AskError, ThrowOnError>({
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/chats/ask'
        });
    }
    
    /**
     * Set Sys Prompt
     */
    public static setSysPrompt<ThrowOnError extends boolean = false>(options: Options<SetSysPromptData, ThrowOnError>) {
        return (options?.client ?? client).post<unknown, SetSysPromptError, ThrowOnError>({
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/chats/set_sys_prompt'
        });
    }
    
    /**
     * Get Sys Prompt
     */
    public static getSysPrompt<ThrowOnError extends boolean = false>(options?: Options<GetSysPromptData, ThrowOnError>) {
        return (options?.client ?? client).get<unknown, unknown, ThrowOnError>({
            ...options,
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/chats/get_sys_prompt'
        });
    }
    
    /**
     * Set Cookies
     */
    public static setCookies<ThrowOnError extends boolean = false>(options: Options<SetCookiesData, ThrowOnError>) {
        return (options?.client ?? client).post<unknown, SetCookiesError, ThrowOnError>({
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/chats/set_cookies'
        });
    }
    
    /**
     * Get Events
     */
    public static getEvents<ThrowOnError extends boolean = false>(options?: Options<GetEventsData, ThrowOnError>) {
        return (options?.client ?? client).get<unknown, unknown, ThrowOnError>({
            ...options,
            url: '/api/chats/events'
        });
    }
    
}

export class ItemsService {
    /**
     * Create Item
     */
    public static createItem<ThrowOnError extends boolean = false>(options: Options<CreateItemData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateItemResponse, CreateItemError, ThrowOnError>({
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            },
            url: '/items/'
        });
    }
    
    /**
     * Get Items
     */
    public static getItems<ThrowOnError extends boolean = false>(options?: Options<GetItemsData, ThrowOnError>) {
        return (options?.client ?? client).get<GetItemsResponse, unknown, ThrowOnError>({
            ...options,
            url: '/api/items/'
        });
    }
    
}